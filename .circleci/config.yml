version: 2.1

orbs:
  slack: circleci/slack@4.10.1
  node: circleci/node@5.0.2
  python: circleci/python@2.0.3
  aws-cli: circleci/aws-cli@3.1.1

commands:
  failure_notification:
    steps:
      - slack/notify:
          event: fail
          channel: C03DAJYL3SM
          template: basic_fail_1
  
  destroy-environment:
    description: Destroy backend and frontend cloudformation stacks
    parameters:
      to:
        default: important
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name <<parameters.to>> 
  
  revert-migrations:
    description: Revert the last migration, if any were executed during current workflow
    parameters:
      to:
        default: id
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/${KVDB_BUCKET}/migration_<<parameters.to>>)
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi


jobs:

  success_notifications:
    docker: 
      - image: cimg/base:stable
    steps:
      - slack/notify:
          event: pass
          channel: C03DAJYL3SM
          template: success_tagged_deployment_1

  build-frontend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths:
            - "frontend/node_modules"
          key: frontend-build
      - failure_notification
  
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - backend-build
      - run:
          name: Build back-end
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths:
            - "frontend/node_modules"
          key: backend-build
      - failure_notification
    
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build
      - run:
          name: Test frontend
          command: | 
            cd frontend
            npm install
            npm run test
      - failure_notification
    
  test-backend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: Test Backend
          command: |
            cd backend
            npm install
            npm run test
      - failure_notification
  
  scan-frontend: 
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - failure_notification

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: Scan backend
          command: |
            cd backend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
      - failure_notification
  
  create-infrastructure:
    docker: 
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar gzip
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure backend infrastructure exists
          command: |
            aws cloudformation deploy --template-file .circleci/files/backend.yml \
            --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople-project-3
      - run:
          name: Ensure frontend infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople-project-3
      - run:
          name: Add backend ip to ansible inventory file
          command: |
            #echo "[all]" > .circleci/ansible/inventory.txt && \
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/ 
          paths:
            - "project/.circleci/ansible/inventory.txt"
      - destroy-environment:
          to: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          to: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - failure_notification

  configure-infrastructure:
    docker:
      - image: cimg/python:3.10.5
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "fa:9f:92:9c:b5:be:c9:73:06:16:2a:e6:cc:a6:9c:62"
      - attach_workspace:
          at: ~/
      - run:
          name: Install Ansible
          command: |
            pip install ansible
      - run:
          name: Install AWS CLI
          command: |
            pip --no-cache-dir install --upgrade awscli
      - run:
          name: Install tar gzip
          command: |
            sudo apt install -y tar gzip
      - run:
          name: Run ansible plays
          command: |
            pwd
            #ls -la
            #ls -la ./.circleci
            #ls -la ./.circleci/ansible 
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          to: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          to: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - failure_notification      

  run-migrations:
    docker: 
      - image: cimg/node:18.4.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - backend-build
      - aws-cli/setup:
          profile-name: udapeople
      #- run:
          #name: Install AWS CLI
          #command: |
            #pip --no-cache-dir install --upgrade awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            #npm audit fix --force --audit-level=critical
            #npm audit fix --force --audit-level=critical
            #npm audit --audit-level=critical
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migrations results to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend
            then
              curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            else
              echo "No migrations are pending"
            fi
      - revert-migrations:
          to: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          to: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          to: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - failure_notification 
  
  deploy-frontend:
    docker:
      - image: cimg/python:3.10.5-node
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "fa:9f:92:9c:b5:be:c9:73:06:16:2a:e6:cc:a6:9c:62"
      - attach_workspace:
          at: ~/
      - run:
          name: Install Ansible
          command: |
            pip install ansible
      - run:
          name: Install AWS CLI
          command: |
            pip --no-cache-dir install --upgrade awscli
      #- run:
         #name: Install tar gzip
          #command: |
            #yum install -y tar gzip
      #- node/install:
          #install-yarn: true
          #ode-version: '16.13'
      #- node/install-packages:
          #cache-path: ~/project/node_modules
          #override-ci-command: npm install
          #app-dir: /frontend
      #- run: sudo npm install -g npm@latest
      #- run: npm run test
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[0].Instances[0].NetworkInterfaces[0].Association.PublicIp')
            #--query 'Reservations[*].Instances[*].PublicIpAddress' 
            
            eval export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run: 
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install 
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - revert-migrations:
          to: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          to: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          to: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - failure_notification 

  deploy-backend:
    docker:
      - image: cimg/python:3.10.5-node
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "fa:9f:92:9c:b5:be:c9:73:06:16:2a:e6:cc:a6:9c:62"
      - attach_workspace:
          at: ~/
      - run:
          name: Install Ansible
          command: |
            pip install ansible
      - run:
          name: Install AWS CLI
          command: |
            pip --no-cache-dir install --upgrade awscli
      #- run:
          #name: Install tar gzip
          #command: |
            #yum install -y tar gzip
      #- node/install:
          #install-yarn: true
          #node-version: '16.13'
      #- node/install-packages:
          #cache-path: ~/project/node_modules
          #override-ci-command: npm install
          #app-dir: /backend
      #- run: sudo npm install -g npm@latest
      #- run: npm run test
      - run: 
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Package backend
          command: |
            cd backend
            npm run build
            tar -czf artifact.tar.gz dist/* package*

            cd ..
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts

            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - revert-migrations:
          to: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          to: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          to: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - failure_notification 

  smoke-test:
    docker: 
      - image: cimg/python:3.10.5-node
    steps:
      - checkout
      - run:
          name: Install AWS CLI
          command: |
            pip --no-cache-dir install --upgrade awscli
      - run: 
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[0].Instances[0].NetworkInterfaces[0].Association.PublicIp' )
            eval export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
    
            echo "here"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then 
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[0].Instances[0].NetworkInterfaces[0].Association.PublicIp' )
            eval export API_URL="http://${BACKEND_IP}:3030"
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees" 
            echo ${API_URL}
            if curl -s ${URL} | grep "Welcome"
            then
              exit 1
            else
              exit 1
            fi
      - revert-migrations:
          to: ${CIRCLE_WORKFLOW_ID:0:7}
      #- destroy-environment:
          #to: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      #- destroy-environment:
          #to: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      #- failure_notification

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - build-frontend
      - scan-backend:
          requires:
            - "build-backend"
      - create-infrastructure:
          requires:
            - test-backend
            - test-frontend
            - scan-backend
            - scan-frontend
      - configure-infrastructure:
          requires:
            - "create-infrastructure"
      - run-migrations:
          requires:
            - "configure-infrastructure"
      - deploy-frontend:
          requires:
            - run-migrations
      - deploy-backend:
          requires:
            - run-migrations
      - smoke-test:
          requires: 
            - deploy-backend
            - deploy-frontend
      - success_notifications:
          requires:
            - smoke-test
          context:
            - org-global 
            - SlackNotification