version: 2.1

orbs:
  slack: circleci/slack@4.10.1

commands:
  failure_notification:
    steps:
      - slack/notify:
          event: fail
          channel: C03DAJYL3SM
          template: basic_fail_1
  
  destroy-environment:
    description: Destroy backend and frontend cloudformation stacks
    parameters:
      to:
        default: important
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name <<parameters.to>> 


jobs:

  success_notifications:
    docker: 
      - image: cimg/base:stable
    steps:
      - slack/notify:
          event: pass
          channel: C03DAJYL3SM
          template: success_tagged_deployment_1

  build-frontend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths:
            - "frontend/node_modules"
          key: frontend-build
      - failure_notification
  
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - backend-build
      - run:
          name: Build back-end
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths:
            - "frontend/node_modules"
          key: backend-build
      - failure_notification
    
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build
      - run:
          name: Test frontend
          command: | 
            cd frontend
            npm install
            npm run test
      - failure_notification
    
  test-backend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: Test Backend
          command: |
            cd backend
            npm install
            npm run test
      - failure_notification
  
  scan-frontend: 
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - failure_notification

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: Scan backend
          command: |
            cd backend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
      - failure_notification
  
  create-infrastructure:
    docker: 
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar gzip
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure backend infrastructure exists
          command: |
            aws cloudformation deploy --template-file .circleci/files/backend.yml \
            --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople-project-3
      - run:
          name: Ensure frontend infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople-project-3
      - run:
          name: Add backend ip to ansible inventory file
          command: |
            #echo "[all]" > .circleci/ansible/inventory.txt && \
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/ 
          paths:
            - "project/.circleci/ansible/inventory.txt"
      - destroy-environment:
          to: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          to: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: cimg/python:3.10.5
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "fa:9f:92:9c:b5:be:c9:73:06:16:2a:e6:cc:a6:9c:62"
      #- attach_workspace:
          #at: /project/.circleci/ansible/inventory.txt
      - run:
          name: Install Ansible
          command: |
            pip install ansible
      - run:
          name: Install AWS CLI
          command: |
            pip --no-cache-dir install --upgrade awscli
      - run:
          name: Install tar gzip
          command: |
            yum install -y tar gzip
      - run:
          name: Run ansible plays
          command: |
            cd ~/project/.circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          to: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          to: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}      


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - build-frontend
      - scan-backend:
          requires:
            - "build-backend"
      - success_notifications:
          requires:
            - test-backend
            - test-frontend
          context:
            - org-global 
            - SlackNotification
      - create-infrastructure:
          requires:
            - test-backend
            - test-frontend
            - scan-backend
            - scan-frontend
      - configure-infrastructure:
          requires:
            - "create-infrastructure"